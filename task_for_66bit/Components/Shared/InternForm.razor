@using task_for_66bit.Data.Models
@using System.ComponentModel.DataAnnotations
@using task_for_66bit.Services

<EditForm Model="@Intern" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>First Name:</label>
        <InputText @bind-Value="Intern.FirstName" />
        <ValidationMessage For="@(() => Intern.FirstName)" />
    </div>

    <div>
        <label>Last Name:</label>
        <InputText @bind-Value="Intern.LastName" />
        <ValidationMessage For="@(() => Intern.LastName)" />
    </div>

    <div>
        <label>Gender:</label>
        <select @bind="Intern.Gender">
            <option value="Male">Male</option>
            <option value="Female">Female</option>
        </select>
        <ValidationMessage For="@(() => Intern.Gender)" />
    </div>

    <div>
        <label>Email:</label>
        <InputText @bind-Value="Intern.Email" />
        <ValidationMessage For="@(() => Intern.Email)" />
    </div>

    <div>
        <label>Phone Number:</label>
        <InputText @bind-Value="Intern.PhoneNumber" />
        <ValidationMessage For="@(() => Intern.PhoneNumber)" />
    </div>

    <div>
        <label>Date of Birth:</label>
        <InputDate @bind-Value="Intern.DateOfBirth" />
        <ValidationMessage For="@(() => Intern.DateOfBirth)" />
    </div>

    <div>
        <label>Direction:</label>
        <select @bind="Intern.DirectionId">
            <option value="">Select Direction</option>
            @foreach (var direction in Directions ?? Enumerable.Empty<Direction>())
            {
                <option value="@direction.Id">@direction.Name</option>
            }
        </select>
        <ValidationMessage For="@(() => Intern.DirectionId)" />
    </div>

    <div>
        <label>Project:</label>
        <select @bind="Intern.ProjectId">
            <option value="">Select Project</option>
            @foreach (var project in Projects ?? Enumerable.Empty<Project>())
            {
                <option value="@project.Id">@project.Name</option>
            }
        </select>
        <ValidationMessage For="@(() => Intern.ProjectId)" />
    </div>

    <div class="new-entity-section">
        <label>Новое направление:</label>
        <InputText @bind-Value="newDirectionName" placeholder="Введите название направления" />
        <button type="button" class="btn btn-sm btn-secondary" @onclick="AddNewDirection">
            Создать направление
        </button>
    </div>

    <div class="new-entity-section">
        <label>Новый проект:</label>
        <InputText @bind-Value="newProjectName" placeholder="Введите название проекта" />
        <button type="button" class="btn btn-sm btn-secondary" @onclick="AddNewProject">
            Создать проект
        </button>
    </div>

    <button type="submit">Submit</button>
</EditForm>

@code {
    [Parameter]
    public Intern Intern { get; set; } = new Intern();

    [Parameter]
    public EventCallback<Intern> OnValidSubmit { get; set; }

    [Parameter]
    public List<Direction> Directions { get; set; } = new List<Direction>();

    [Parameter]
    public List<Project> Projects { get; set; } = new List<Project>();

    private async Task HandleValidSubmit()
    {
        await OnValidSubmit.InvokeAsync(Intern);
    }
    private string newDirectionName = string.Empty;
    private string newProjectName = string.Empty;

    [Inject] public DirectionService DirectionService { get; set; } = null!;

    [Inject]

    public ProjectService ProjectService { get; set; } = null!;

    private async Task AddNewDirection()
    {
        if (!string.IsNullOrWhiteSpace(newDirectionName))
        {
            var newDirection = new Direction { Name = newDirectionName };
            await DirectionService.AddDirectionAsync(newDirection);
            
            Directions = (await DirectionService.GetAllDirectionsAsync()).Directions.ToList();
            
            Intern.DirectionId = newDirection.Id;
            newDirectionName = string.Empty;
        }
    }

    private async Task AddNewProject()
    {
        if (!string.IsNullOrWhiteSpace(newProjectName))
        {
            var newProject = new Project { Name = newProjectName };
            await ProjectService.AddProjectAsync(newProject);
            
            Projects = (await ProjectService.GetAllProjectsAsync()).Projects.ToList();
            
            Intern.ProjectId = newProject.Id;
            newProjectName = string.Empty;
        }
    }
}