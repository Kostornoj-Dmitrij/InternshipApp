@page "/interns"
@using task_for_66bit.Data.Models
@using task_for_66bit.Services
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Web
@inject NavigationManager NavigationManager
@inject InternService InternService
@inject ProjectService ProjectService
@inject DirectionService DirectionService

<h3>Список стажёров</h3>

<div class="mb-3">
    <label>Фильтрация по проекту:</label>
    <select @bind="_selectedProjectFilter" class="form-select w-50">
        <option value="">Все проекты</option>
        @foreach (var project in _projects)
        {
            <option value="@project.Id">@project.Name</option>
        }
    </select>
</div>

<div class="mb-3">
    <label>Фильтрация по направлению:</label>
    <select @bind="_selectedDirectionFilter" class="form-select w-50">
        <option value="">Все направления</option>
        @foreach (var direction in _directions)
        {
            <option value="@direction.Id">@direction.Name</option>
        }
    </select>
</div>

<button @onclick="ApplyFilter" class="btn btn-primary">Применить фильтр</button>

@if (_filteredInterns.Any())
{
    <table class="table table-striped table-bordered">
        <thead class="thead-dark">
        <tr>
            <th scope="col">Имя</th>
            <th scope="col">Почта</th>
            <th scope="col">Номер телефона</th>
            <th scope="col">Проект</th>
            <th scope="col">Направление</th>
            <th scope="col">Действия</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var intern in _filteredInterns)
        {
            <tr>
                <td>@intern.FirstName @intern.LastName</td>
                <td>@intern.Email</td>
                <td>@intern.PhoneNumber</td>
                <td>@intern.Project.Name</td>
                <td>@intern.Direction.Name</td>
                <td>
                    <button @onclick="() => EditIntern(intern)" class="btn btn-sm btn-warning">Edit</button>
                    <button @onclick="() => DeleteIntern(intern.Id)" class="btn btn-sm btn-danger">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
else
{
    <p>Не найдено стажёров, удовлетворяющих фильтрам.</p>
}

@code {
    private List<Intern> _interns = new();
    private List<Intern> _filteredInterns = new();
    private List<Project> _projects = new();
    private List<Direction> _directions = new();
    private int? _selectedProjectFilter;
    private int? _selectedDirectionFilter;

    protected override async Task OnInitializedAsync()
    {
        _interns = (await InternService.GetAllInternsAsync()).ToList();
        _projects = (await ProjectService.GetAllProjectsAsync()).Projects.ToList();
        _directions = (await DirectionService.GetAllDirectionsAsync()).Directions.ToList();
        _filteredInterns = _interns.ToList();
    }

    private void ApplyFilter()
    {
        _filteredInterns = _interns;

        if (_selectedProjectFilter.HasValue)
        {
            _filteredInterns = _filteredInterns
                .Where(i => i.Project.Id == _selectedProjectFilter.Value)
                .ToList();
        }

        if (_selectedDirectionFilter.HasValue)
        {
            _filteredInterns = _filteredInterns
                .Where(i => i.Direction.Id == _selectedDirectionFilter.Value)
                .ToList();
        }
    }

    private void EditIntern(Intern intern)
    {
        NavigationManager.NavigateTo($"/edit-intern/{intern.Id}");
    }

    private async Task DeleteIntern(int id)
    { 
        await InternService.DeleteInternAsync(id);
        _interns = (await InternService.GetAllInternsAsync()).ToList();
        _filteredInterns = _interns.ToList();
    }
}