@page "/interns"
@using Microsoft.AspNetCore.Components.Web
@using task_for_66bit.Data.Models
@using task_for_66bit.Services
@inject NavigationManager NavigationManager
@inject InternService InternService
@inject ProjectService ProjectService
@inject DirectionService DirectionService

<h3>Interns List</h3>

<div class="mb-3">
    <label>Filter by Project:</label>
    <select @bind="selectedProjectFilter" class="form-select w-50">
        <option value="">All Projects</option>
        @foreach (var project in projects)
        {
            <option value="@project.Id">@project.Name</option>
        }
    </select>
</div>

<div class="mb-3">
    <label>Filter by Direction:</label>
    <select @bind="selectedDirectionFilter" class="form-select w-50">
        <option value="">All Directions</option>
        @foreach (var direction in directions)
        {
            <option value="@direction.Id">@direction.Name</option>
        }
    </select>
</div>

<button @onclick="ApplyFilter" class="btn btn-primary">Apply Filter</button>

@if (filteredInterns.Any())
{
    <table>
        <thead>
        <tr>
            <th>Name</th>
            <th>Email</th>
            <th>Phone</th>
            <th>Project</th>
            <th>Direction</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var intern in filteredInterns)
        {
            <tr>
                <td>@intern.FirstName @intern.LastName</td>
                <td>@intern.Email</td>
                <td>@intern.PhoneNumber</td>
                <td>@intern.Project?.Name</td>
                <td>@intern.Direction?.Name</td>
                <td>
                    <button @onclick="() => EditIntern(intern)" class="btn btn-sm btn-warning">Edit</button>
                    <button @onclick="() => DeleteIntern(intern.Id)" class="btn btn-sm btn-danger">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
else
{
    <p>Не найдено стажёров, удовлетворяющих фильтрам.</p>
}

@code {
    private List<Intern> interns = new();
    private List<Intern> filteredInterns = new();
    private List<Project> projects = new();
    private List<Direction> directions = new();
    private int? selectedProjectFilter;
    private int? selectedDirectionFilter;

    protected override async Task OnInitializedAsync()
    {
        interns = (await InternService.GetAllInternsAsync()).ToList();
        projects = (await ProjectService.GetAllProjectsAsync()).Projects.ToList();
        directions = (await DirectionService.GetAllDirectionsAsync()).Directions.ToList();
        filteredInterns = interns.ToList();
    }

    private void ApplyFilter()
    {
        filteredInterns = interns;

        if (selectedProjectFilter.HasValue)
        {
            filteredInterns = filteredInterns
                .Where(i => i.Project?.Id == selectedProjectFilter.Value)
                .ToList();
        }

        if (selectedDirectionFilter.HasValue)
        {
            filteredInterns = filteredInterns
                .Where(i => i.Direction?.Id == selectedDirectionFilter.Value)
                .ToList();
        }
    }
    

    private void EditIntern(Intern intern)
    {
        Console.WriteLine($"Editing intern: {intern.Id}");
        NavigationManager.NavigateTo($"/edit-intern/{intern.Id}");
    }

    private async Task DeleteIntern(int id)
    {
        Console.WriteLine($"Deleting intern: {id}");
        await InternService.DeleteInternAsync(id);
        interns = (await InternService.GetAllInternsAsync()).ToList();
        filteredInterns = interns.ToList();
    }
}