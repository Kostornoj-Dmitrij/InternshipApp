@page "/directions-projects"
@using task_for_66bit.Data.Models
@using task_for_66bit.Services
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.WebUtilities
@inject DirectionService DirectionService
@inject ProjectService ProjectService
@inject InternService InternService
@inject NavigationManager NavigationManager

<h3>Направления и проекты</h3>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger" role="alert">
   @_errorMessage
    </div>
}

<ul class="nav nav-tabs">
    <li class="nav-item">
        <button @onclick="@(() => SwitchTab(TabType.Directions))"
                class="nav-link @(_activeTab == TabType.Directions ? "active" : "")">
            Направления
        </button>
    </li>
    <li class="nav-item">
        <button @onclick="@(() => SwitchTab(TabType.Projects))"
                class="nav-link @(_activeTab == TabType.Projects ? "active" : "")">
            Проекты
        </button>
    </li>
</ul>

@if (_activeTab == TabType.Directions)
{
    <button class="btn btn-primary my-2" @onclick="() => ShowEditDirection(null)">Добавить направление</button>

    <table class="table table-striped table-bordered">
        <thead class="thead-dark">
        <tr>
            <th>Название</th>
            <th>Стажёры</th>
            <th>Действия</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var direction in _directions)
        {
            <tr @key="direction.Id">
                <td>@direction.Name</td>
                <td>
                    <button @onclick="() => ShowInterns(direction.Id, TabType.Directions)">
                        @direction.Interns.Count
                    </button>
                </td>
                <td>
                    <button class="btn btn-sm btn-warning"
                            @onclick="() => ShowEditDirection(direction)">Изменить</button>
                    <button class="btn btn-sm btn-danger"
                            @onclick="() => DeleteDirection(direction.Id)">Удалить</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
else if (_activeTab == TabType.Projects)
{
    <button class="btn btn-primary my-2" @onclick="() => ShowEditProject(null)">Добавить проект</button>
    <table class="table table-striped table-bordered">
        <thead class="thead-dark">
        <tr>
            <th>Название</th>
            <th>Стажёры</th>
            <th>Действия</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var project in _projects)
        {
            <tr>
                <td>@project.Name</td>
                <td>
                    <button @onclick="() => ShowInterns(project.Id, TabType.Projects)">
                        @project.Interns.Count
                    </button>
                </td>
                <td>
                    <button class="btn btn-sm btn-warning"
                            @onclick="() => ShowEditProject(project)">Изменить</button>
                    <button class="btn btn-sm btn-danger"
                            @onclick="() => DeleteProject(project.Id)">Удалить</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
@if (_showDirectionModal)
{
    <div class="modal show" style="display: block; background: rgba(0, 0, 0, 0.5)">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(_currentDirection.Id == 0 ? "Add" : "Edit") Направление</h5>
                </div>
                <div class="modal-body">
                    <EditForm Model="@_currentDirection" OnValidSubmit="SaveDirection">
                        <InputText @bind-Value="_currentDirection.Name" class="form-control" />
                        <button type="submit" class="btn btn-primary mt-2">Сохранить</button>
                        <button type="button" class="btn btn-secondary mt-2"
                                @onclick="CloseDirectionModal">Отмена</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@if (_showProjectModal)
{
    <div class="modal show" style="display: block">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(_currentProject.Id == 0 ? "Add" : "Edit") Проект</h5>
                </div>
                <div class="modal-body">
                    <EditForm Model="@_currentProject" OnValidSubmit="SaveProject">
                        <InputText @bind-Value="_currentProject.Name" class="form-control" />
                        <button type="submit" class="btn btn-primary mt-2">Сохранить</button>
                        <button type="button" class="btn btn-secondary mt-2"
                                @onclick="CloseProjectModal">Отмена</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@if (_showInternsModal)
{
    <div class="modal show" style="display: block; background: rgba(0, 0, 0, 0.5)">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Стажёры</h5>
                    <button type="button" class="btn-close" @onclick="CloseInternsModal"></button>
                </div>
                <div class="modal-body">
                    <ul>
                        @foreach (var intern in _interns)
                        {
                            <li>@intern.FirstName @intern.LastName</li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
}

<div class="mb-3">
    <label>Search:</label>
    <input type="text" @bind="_searchQuery" placeholder="Search..." class="form-control w-50" />
</div>

<div class="mb-3">
    <label>Сортировать по:</label>
    <select @bind="_sortField" class="form-control w-50">
        <option value="Name">Название</option>
        <option value="InternsCount">Число стажёров</option>
    </select>
</div>
<div class="mb-3">
    <label>Порядок сортировки:</label>
    <select @bind="_sortOrder" class="form-control w-50">
        <option value="asc">Возрастание</option>
        <option value="desc">Убывание</option>
    </select>
</div>
<div class="mb-3">
    <label class="me-2">Страница:</label>
    <input type="number" @bind="_currentPage" min="1" class="form-control" placeholder="Page" />
    <label class="me-2">Кол-во записей на странице:</label>
    <input type="number" @bind="_pageSize" min="1" class="form-control" placeholder="Page Size" />
</div>
<button @onclick="LoadData" class="btn btn-primary">Применить фильтрацию</button>

<div class="mt-3">
    <button @onclick="PreviousPage" class="btn btn-secondary" disabled="@(_currentPage == 1)">Предыдущая</button>
    <button @onclick="NextPage" class="btn btn-secondary" disabled="@(_currentPage * _pageSize >= _totalCount)">Следующая</button>
</div>

@code {
    private List<Direction> _directions = new();
    private List<Project> _projects = new();
    private bool _showDirectionModal;
    private List<Intern> _interns = new();
    private bool _showProjectModal;
    private Direction _currentDirection = new();
    private Project _currentProject = new();
    private string _errorMessage = "";
    public enum TabType { Directions, Projects }
    
    private TabType _activeTab = TabType.Directions;
    private string _searchQuery = "";
    private string _sortField = "Name";
    private string _sortOrder = "asc";
    private int _currentPage = 1;
    private int _pageSize = 2;
    private int _totalCount;
    private bool _showInternsModal;

    protected override async Task OnInitializedAsync()
    {
        RestoreStateFromUrl();
        await LoadDirections();
    }
    
    private async Task SwitchTab(TabType tab)
    {
        _errorMessage = "";
        if (!Enum.IsDefined(typeof(TabType), tab))
        {
            throw new ArgumentException("Invalid tab type");
        }
        _activeTab = tab;
        if (_activeTab == TabType.Directions) 
        {
            await LoadDirections();
        }
        else 
        {
            await LoadProjects();
        }
        UpdateUrl();
        StateHasChanged();
    }

    private async Task LoadDirections() => _directions = (await DirectionService.GetAllDirectionsAsync()).Directions.ToList();
    private async Task LoadProjects() => _projects = (await ProjectService.GetAllProjectsAsync()).Projects.ToList();

    private void ShowEditDirection(Direction? direction)
    {
        if (direction != null)
        {
            _currentDirection = new Direction
            {
                Id = direction.Id,
                Name = direction.Name,
                CreatedAt = direction.CreatedAt,
                UpdatedAt = direction.UpdatedAt
            };
        }
        else
        {
            _currentDirection = new Direction();
        }

        _showDirectionModal = true;
        StateHasChanged();
    }

    private async Task SaveDirection()
    {
        _currentDirection.UpdatedAt = DateTime.UtcNow;

        if (_currentDirection.Id == 0)
        {
            await DirectionService.AddDirectionAsync(_currentDirection);
        }
        else
        {
            await DirectionService.UpdateDirectionAsync(_currentDirection);
        }

        await LoadDirections();
        _showDirectionModal = false;
    }

    private async Task DeleteDirection(int id)
    {
        var direction = _directions.First(d => d.Id == id);
        if (direction.Interns.Any())
        {
            _errorMessage = "Нельзя удалить направление, в котором есть стажёры.";
            return;
        }
        await DirectionService.DeleteDirectionAsync(id);
        await LoadDirections();
        StateHasChanged();
    }
    
    private void ShowEditProject(Project? project)
    {
        if (project != null)
        {
            _currentProject = new Project
            {
                Id = project.Id,
                Name = project.Name,
                CreatedAt = project.CreatedAt,
                UpdatedAt = project.UpdatedAt
            };
        }
        else
        {
            _currentProject = new Project();
        }

        _showProjectModal = true;
        StateHasChanged();
    }
    
    private async Task SaveProject()
    {
        _currentProject.UpdatedAt = DateTime.UtcNow;

        if (_currentProject.Id == 0)
        {
            await ProjectService.AddProjectAsync(_currentProject);
        }
        else
        {
            await ProjectService.UpdateProjectAsync(_currentProject);
        }

        await LoadProjects();
        _showProjectModal = false;
    }

    private async Task DeleteProject(int id)
    {
        var project = _projects.First(p => p.Id == id);
        if (project.Interns.Any())
        {
            _errorMessage = "Нельзя удалить проект, в котором есть стажёры.";
            return;
        }
        await ProjectService.DeleteProjectAsync(id);
        await LoadProjects();
        StateHasChanged();
    }

    private void CloseDirectionModal()
    {
        _showDirectionModal = false;
        _errorMessage = "";
        StateHasChanged();
    }
    private void CloseProjectModal()
    {
        _showProjectModal = false;
        _errorMessage = "";
        StateHasChanged();
    }
    
    private async Task LoadData()
    {
        bool isAscending = _sortOrder == "asc";
        if (_activeTab == TabType.Directions)
        {
            var result = await DirectionService.GetAllDirectionsAsync(_searchQuery, _sortField, isAscending, _currentPage, _pageSize);
            _directions = result.Directions.ToList();
            _totalCount = result.TotalCount;
        }
        else
        {
            var result = await ProjectService.GetAllProjectsAsync(_searchQuery, _sortField, isAscending, _currentPage, _pageSize);
            _projects = result.Projects.ToList();
            _totalCount = result.TotalCount;
        }
        UpdateUrl();
        StateHasChanged();
    }
    
    private async Task ShowInterns(int id, TabType tabType)
    {
        if (tabType == TabType.Directions)
        {
            _interns = (await InternService.GetInternsByDirectionIdAsync(id)).ToList();
        }
        else if (tabType == TabType.Projects)
        {
            _interns = (await InternService.GetInternsByProjectIdAsync(id)).ToList();
        }
        _showInternsModal = true;
        StateHasChanged();
    }

    private void CloseInternsModal()
    {
        _showInternsModal = false;
        _interns.Clear();
        StateHasChanged();
    }
    
    private async Task PreviousPage()
    {
        if (_currentPage > 1)
        {
            _currentPage--;
            await LoadData();
        }
    }

    private async Task NextPage()
    {
        if (_currentPage * _pageSize < _totalCount)
        {
            _currentPage++;
            await LoadData();
        }
    }
    private void UpdateUrl()
    {
        var uri = NavigationManager.GetUriWithQueryParameters(new Dictionary<string, object?>
        {
            { "tab", _activeTab.ToString() },
            { "search", _searchQuery },
            { "sortField", _sortField },
            { "sortOrder", _sortOrder },
            { "page", _currentPage },
            { "pageSize", _pageSize }
        });
        NavigationManager.NavigateTo(uri, forceLoad: false);
    }
    private void RestoreStateFromUrl()
    {
        var uri = new Uri(NavigationManager.Uri);
        var queryParams = QueryHelpers.ParseQuery(uri.Query);

        if (queryParams.TryGetValue("tab", out var tab))
        {
            _activeTab = Enum.Parse<TabType>(tab!);
        }

        if (queryParams.TryGetValue("search", out var search))
        {
            _searchQuery = search!;
        }

        if (queryParams.TryGetValue("sortField", out var sortFieldParam))
        {
            _sortField = sortFieldParam!;
        }

        if (queryParams.TryGetValue("sortOrder", out var sortOrderParam))
        {
            _sortOrder = sortOrderParam!;
        }

        if (queryParams.TryGetValue("page", out var page))
        {
            _currentPage = int.Parse(page!);
        }

        if (queryParams.TryGetValue("pageSize", out var pageSizeParam))
        {
            _pageSize = int.Parse(pageSizeParam!);
        }
    }
}