@page "/create-intern"
@using task_for_66bit.Data.Models
@using task_for_66bit.Services
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Web
@inject NavigationManager NavigationManager
@inject InternService InternService
@inject DirectionService DirectionService
@inject ProjectService ProjectService

<h3>Добавить нового стажёра</h3>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @_errorMessage
    </div>
}

<EditForm Model="@_intern" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Имя (*)</label>
        <InputText class="form-control" @bind-Value="_intern.FirstName" />
        <ValidationMessage For="@(() => _intern.FirstName)" />
    </div>

    <div class="form-group">
        <label>Фамилия (*)</label>
        <InputText class="form-control" @bind-Value="_intern.LastName" />
        <ValidationMessage For="@(() => _intern.LastName)" />
    </div>

    <div class="form-group">
        <label>Пол (*)</label>
        <InputSelect class="form-control" @bind-Value="_intern.Gender">
            <option value="">Выбрать пол</option>
            <option value="Male">Муж</option>
            <option value="Female">Жен</option>
        </InputSelect>
        <ValidationMessage For="@(() => _intern.Gender)" />
    </div>

    <div class="form-group">
        <label>Почта (*)</label>
        <InputText class="form-control" @bind-Value="_intern.Email" />
        <ValidationMessage For="@(() => _intern.Email)" />
    </div>

    <div class="form-group">
        <label>Номер телефона (опционально)</label>
        <InputText class="form-control" @bind-Value="_intern.PhoneNumber" />
        <ValidationMessage For="@(() => _intern.PhoneNumber)" />
    </div>

    <div class="form-group">
        <label>Дата рождения (*)</label>
        <InputDate class="form-control" @bind-Value="_intern.DateOfBirth" />
        <ValidationMessage For="@(() => _intern.DateOfBirth)" />
    </div>

    <div class="form-group">
        <label>Направление (*)</label>
        <div class="input-group">
            <InputSelect class="form-control" @bind-Value="_intern.DirectionId">
                <option value="">Выбрать направление</option>
                @foreach (var direction in _directions)
                {
                    <option value="@direction.Id">@direction.Name</option>
                }
            </InputSelect>
            <button type="button" class="btn btn-secondary" @onclick="() => ShowAddDirectionModal()">Добавить направление</button>
        </div>
        <ValidationMessage For="@(() => _intern.DirectionId)" />
    </div>

    <div class="form-group">
        <label>Проект (*)</label>
        <div class="input-group">
            <InputSelect class="form-control" @bind-Value="_intern.ProjectId">
                <option value="">Выбрать проект</option>
                @foreach (var project in _projects)
                {
                    <option value="@project.Id">@project.Name</option>
                }
            </InputSelect>
            <button type="button" class="btn btn-secondary" @onclick="() => ShowAddProjectModal()">Добавить проект</button>
        </div>
        <ValidationMessage For="@(() => _intern.ProjectId)" />
    </div>
    <div>
        <label></label>
    </div>
    <button type="submit" class="btn btn-primary">Добавить</button>
</EditForm>

@if (_showAddDirectionModal)
{
    <div class="modal show" style="display: block; background: rgba(0, 0, 0, 0.5)">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Добавить новое направление</h5>
                </div>
                <div class="modal-body">
                    <EditForm Model="@_newDirection" OnValidSubmit="SaveNewDirection">
                        <InputText @bind-Value="_newDirection.Name" class="form-control" placeholder="Direction Name" />
                        <button type="submit" class="btn btn-primary mt-2">Сохранить</button>
                        <button type="button" class="btn btn-secondary mt-2" @onclick="CloseAddDirectionModal">Отмена</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@if (_showAddProjectModal)
{
    <div class="modal show" style="display: block; background: rgba(0, 0, 0, 0.5)">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Добавить новый проект</h5>
                </div>
                <div class="modal-body">
                    <EditForm Model="@_newProject" OnValidSubmit="SaveNewProject">
                        <InputText @bind-Value="_newProject.Name" class="form-control" placeholder="Project Name" />
                        <button type="submit" class="btn btn-primary mt-2">Сохранить</button>
                        <button type="button" class="btn btn-secondary mt-2" @onclick="CloseAddProjectModal">Отмена</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private Intern _intern = new();
    private List<Direction> _directions = new();
    private List<Project> _projects = new();
    private bool _showAddDirectionModal;
    private bool _showAddProjectModal;
    private Direction _newDirection = new();
    private Project _newProject = new();
    private string _errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        _directions = (await DirectionService.GetAllDirectionsAsync()).Directions.ToList();
        _projects = (await ProjectService.GetAllProjectsAsync()).Projects.ToList();
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            bool isEmailUnique = await InternService.IsEmailUniqueAsync(_intern.Email);
            if (!isEmailUnique)
            {
                _errorMessage = "Стажёр с таким email уже существует.";
                return;
            }
            await InternService.AddInternAsync(_intern);
            NavigationManager.NavigateTo("/interns");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void ShowAddDirectionModal()
    {
        _newDirection = new Direction();
        _showAddDirectionModal = true;
    }

    private void CloseAddDirectionModal()
    {
        _showAddDirectionModal = false;
    }

    private async Task SaveNewDirection()
    {
        await DirectionService.AddDirectionAsync(_newDirection);
        _directions = (await DirectionService.GetAllDirectionsAsync()).Directions.ToList();
        _showAddDirectionModal = false;
    }

    private void ShowAddProjectModal()
    {
        _newProject = new Project();
        _showAddProjectModal = true;
    }

    private void CloseAddProjectModal()
    {
        _showAddProjectModal = false;
    }

    private async Task SaveNewProject()
    {
        await ProjectService.AddProjectAsync(_newProject);
        _projects = (await ProjectService.GetAllProjectsAsync()).Projects.ToList();
        _showAddProjectModal = false;
    }
}