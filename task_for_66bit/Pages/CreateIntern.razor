@page "/create-intern"
@using task_for_66bit.Data.Models
@using task_for_66bit.Services
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Web
@inject NavigationManager NavigationManager
@inject InternService InternService
@inject DirectionService DirectionService
@inject ProjectService ProjectService

<h3>Create New Intern</h3>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @_errorMessage
    </div>
}

<EditForm Model="@_intern" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Имя (*)</label>
        <InputText class="form-control" @bind-Value="_intern.FirstName" />
        <ValidationMessage For="@(() => _intern.FirstName)" />
    </div>

    <div class="form-group">
        <label>Фамилия (*)</label>
        <InputText class="form-control" @bind-Value="_intern.LastName" />
        <ValidationMessage For="@(() => _intern.LastName)" />
    </div>

    <div class="form-group">
        <label>Пол (*)</label>
        <InputSelect class="form-control" @bind-Value="_intern.Gender">
            <option value="">Выберите пол</option>
            <option value="Male">М</option>
            <option value="Female">Ж</option>
        </InputSelect>
        <ValidationMessage For="@(() => _intern.Gender)" />
    </div>

    <div class="form-group">
        <label>Email (*)</label>
        <InputText class="form-control" @bind-Value="_intern.Email" />
        <ValidationMessage For="@(() => _intern.Email)" />
    </div>

    <div class="form-group">
        <label>Номер телефона</label>
        <InputText class="form-control" @bind-Value="_intern.PhoneNumber" />
        <ValidationMessage For="@(() => _intern.PhoneNumber)" />
    </div>

    <div class="form-group">
        <label>Дата рождения (*)</label>
        <InputDate class="form-control" @bind-Value="_intern.DateOfBirth" />
        <ValidationMessage For="@(() => _intern.DateOfBirth)" />
    </div>

    <div class="form-group">
        <label>Направление (*)</label>
        <InputSelect class="form-control" @bind-Value="_intern.DirectionId">
            <option value="">Выберите направление</option>
            @foreach (var direction in _directions)
            {
                <option value="@direction.Id">@direction.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => _intern.DirectionId)" />
    </div>

    <div class="form-group">
        <label>Проект (*)</label>
        <InputSelect class="form-control" @bind-Value="_intern.ProjectId">
            <option value="">Выберите проект</option>
            @foreach (var project in _projects)
            {
                <option value="@project.Id">@project.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => _intern.ProjectId)" />
    </div>

    <button type="submit" class="btn btn-primary">Добавить стажёра</button>
</EditForm>

@code {
    private Intern _intern = new();
    private List<Direction> _directions = new();
    private List<Project> _projects = new();
    private string _errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        _directions = (await DirectionService.GetAllDirectionsAsync()).Directions.ToList();
        _projects = (await ProjectService.GetAllProjectsAsync()).Projects.ToList();
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            bool isEmailUnique = await InternService.IsEmailUniqueAsync(_intern.Email);
            if (!isEmailUnique)
            {
                _errorMessage = "Стажёр с таким email уже существует.";
                return;
            }
            await InternService.AddInternAsync(_intern);
            NavigationManager.NavigateTo("/interns");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}